---
import Layout from '../layouts/Layout.astro';
import PurchaseForm from '../components/PurchaseForm.jsx';
import MyGallery from '../components/MyGallery.jsx'; // <--- Importamos el carrusel casero
import { marked } from 'marked';

interface Review {
  name: string;
  date: string;
  rating: number;
  text: string;
}

interface Props {
  title: string;
  productImages: string[];
  price: number;
  oldPrice?: number;
  descriptionParagraphs?: string[];
  reviews?: Review[];
  body?: any;
  instructions?: string[];
  shipping?: string[];
  warranty?: string[];
}

const {
  title,
  productImages,
  price,
  oldPrice,
  descriptionParagraphs = [],
  reviews = [],
  instructions = [],
  shipping = [],
  warranty = []
} = Astro.props as Props;

function processMarkdown(text: string) {
  return marked.parse(text, {
    breaks: true,
    headerIds: false,
  });
}
---

<Layout title={title}>
  <!-- (Opcional) Estilos globales para flechas, transiciones, etc. 
       O ponlos directamente en tu .css, o en el componente. -->
  <style is:global>
    /* Ejemplo de personalización:
    button:hover {
      transform: scale(1.05);
    }
    */
    @keyframes pulsate {
      0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(37, 99, 235, 0.7);
      }
      50% {
        transform: scale(1.15);
        box-shadow: 0 0 30px 10px rgba(37, 99, 235, 0.4);
      }
      100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(37, 99, 235, 0.7);
      }
    }

    .pulsate-button {
      animation: pulsate 1.5s ease-in-out infinite;
      transition: all 0.3s ease;
    }

    .pulsate-button:hover {
      animation: none;
      transform: scale(1.1);
      background-color: #1d4ed8;
      box-shadow: 0 0 20px 5px rgba(37, 99, 235, 0.3);
    }
  </style>

  <div class="max-w-[980px] mx-auto px-4 py-8 md:py-16">
    <div class="md:flex md:flex-col md:gap-12 md:items-start">
      
      <!-- Galería (React) -->
      <div class="md:w-full mt-16">
        <MyGallery productImages={productImages} title={title} client:load />
      </div>

      <!-- Contenido del producto -->
      <div class="md:w-full mt-8 md:mt-0">
        <h1 class="text-3xl md:text-4xl font-bold mb-6">{title}</h1>

        <!-- Precio y Botón de Compra -->
        <div class="flex flex-col md:flex-row items-start md:items-center gap-4 mb-6">
          <div class="flex items-baseline">
            <span class="text-3xl md:text-4xl font-bold text-blue-600">
              ${price.toLocaleString('es-CL')}
            </span>
            {oldPrice && (
              <>
                <span class="ml-4 text-xl text-gray-500 line-through">
                  ${oldPrice.toLocaleString('es-CL')}
                </span>
                <span class="ml-2 bg-green-500 text-white px-2 py-1 rounded-full text-sm font-bold">
                  {Math.round(((oldPrice - price) / oldPrice) * 100)}% OFF
                </span>
              </>
            )}
          </div>
          <button
            id="openPurchaseModal"
            class="w-full md:w-auto bg-blue-600 text-white py-4 px-6 rounded-full text-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 pulsate-button"
          >
            <span>Comprar ahora</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                clip-rule="evenodd"
              />
            </svg>
          </button>
        </div>

        <div class="space-y-4 text-gray-600">
          {descriptionParagraphs.map((p) => (
            <p class="text-lg leading-relaxed">{p}</p>
          ))}
        </div>

        <!-- Acordeones -->
        <div class="mt-12 space-y-4">
          {instructions.length > 0 && (
            <div class="border border-gray-200 rounded-xl overflow-hidden">
              <button
                class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                onclick="toggleAccordion(this)"
              >
                <span class="text-lg font-semibold">Modo de Uso</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 transform transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div class="hidden px-6 py-4 bg-gray-50">
                <ul class="list-disc list-inside space-y-2 text-gray-600">
                  {instructions.map((instruction) => (
                    <p set:html={processMarkdown(instruction)} />
                  ))}
                </ul>
              </div>
            </div>
          )}

          {shipping.length > 0 && (
            <div class="border border-gray-200 rounded-xl overflow-hidden">
              <button
                class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                onclick="toggleAccordion(this)"
              >
                <span class="text-lg font-semibold">Envío</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 transform transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div class="hidden px-6 py-4 bg-gray-50">
                <div class="space-y-2 text-gray-600">
                  {shipping.map((item) => (
                    <p set:html={processMarkdown(item)} />
                  ))}
                </div>
              </div>
            </div>
          )}

          {warranty && warranty.length > 0 && (
            <div class="border border-gray-200 rounded-xl overflow-hidden">
              <button
                class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                onclick="toggleAccordion(this)"
              >
                <span class="text-lg font-semibold">Garantía</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5 transform transition-transform"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div class="hidden px-6 py-4 bg-gray-50">
                <div class="space-y-2 text-gray-600">
                  {warranty.map((item) => (
                    <p set:html={processMarkdown(item)} />
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- Reseñas -->
    {reviews.length > 0 && (
      <div class="mt-16 pt-8 border-t">
        <h2 class="text-2xl font-bold mb-8">Reseñas de Clientes</h2>
        <div class="grid md:grid-cols-2 gap-6">
          {reviews.map((review) => (
            <div class="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
              <div class="flex items-center mb-4">
                <div class="flex-1">
                  <h3 class="font-semibold">{review.name}</h3>
                  <p class="text-sm text-gray-500">{review.date}</p>
                </div>
                <div class="flex gap-1">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class={`h-5 w-5 ${i < review.rating ? 'text-yellow-400' : 'text-gray-300'}`}
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
              </div>
              <p class="text-gray-600">{review.text}</p>
            </div>
          ))}
        </div>
      </div>
    )}

    <!-- Modal de compra -->
    <div id="purchaseModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
      <div
        class="bg-white rounded-2xl w-full max-w-md m-4 overflow-y-auto relative"
        style="max-height: calc(100vh - 2rem);"
      >
        <button
          id="closePurchaseModal"
          class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        <div class="p-6">
          <PurchaseForm client:load productTitle={title} productPrice={price} />
        </div>
      </div>
    </div>

  <!-- Scripts para acordeones y modal -->
  <script is:inline>
    // Acordeones
    window.toggleAccordion = (button) => {
      const content = button.nextElementSibling;
      const icon = button.querySelector('svg');
      content.classList.toggle('hidden');
      icon.style.transform = content.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
    }

    // Modal de compra
    const modal = document.getElementById('purchaseModal');
    const openButton = document.getElementById('openPurchaseModal');
    const closeButton = document.getElementById('closePurchaseModal');

    openButton.addEventListener('click', () => {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';

      // Rastrear evento InitiateCheckout con los valores dinámicos
      if (typeof window !== 'undefined' && window.fbq) {
        window.fbq('track', 'InitiateCheckout', {
          content_name: title,
          content_type: 'product',
          content_ids: [title],
          value: price,
          currency: 'CLP'
        });
      }
    });

    closeButton.addEventListener('click', () => {
      modal.classList.remove('flex');
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    });

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.remove('flex');
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }
    });

    // Inicializar el evento ViewContent cuando se carga la página
    if (typeof window !== 'undefined' && window.fbq) {
      window.fbq('track', 'ViewContent', {
        content_name: title,
        content_type: 'product',
        content_ids: [title],
        value: price,
        currency: 'CLP'
      });
    }
  </script>
</Layout>
