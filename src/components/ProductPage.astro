---
import Layout from '../layouts/Layout.astro';
import PurchaseForm from '../components/PurchaseForm.jsx';
import MyGallery from '../components/MyGallery.jsx'; 
import CollaboratorsBanner from '../components/CollaboratorsBanner.jsx';
import { marked } from 'marked';

interface Review {
  name: string;
  date: string;
  rating: number;
  text: string;
}

interface Props {
  title: string;
  productImages: string[];
  price: number;
  oldPrice?: number;
  descriptionParagraphs?: string[];
  reviews?: Review[];
  body?: any;
  instructions?: string[];
  shipping?: string[];
  warranty?: string[];
}

const {
  title,
  productImages,
  price,
  oldPrice,
  descriptionParagraphs = [],
  reviews = [],
  instructions = [],
  shipping = [],
  warranty = []
} = Astro.props as Props;

function processMarkdown(text: string) {
  return marked.parse(text, {
    breaks: true,
    headerIds: false,
  });
}
---

<Layout title={title}>
  <!-- (Opcional) Estilos globales para flechas, transiciones, etc. 
       O ponlos directamente en tu .css, o en el componente. -->
  <style is:global>
    /* Ejemplo de personalizaci√≥n:
    button:hover {
      transform: scale(1.05);
    }
    */
    @keyframes shine {
      0% { background-position: -200% 50%; }
      100% { background-position: 200% 50%; }
    }

    @keyframes truck {
      0%, 100% { transform: translateX(0); }
      50% { transform: translateX(4px); }
    }

    @keyframes cart {
      0%, 100% { transform: translateX(0) rotate(0); }
      25% { transform: translateX(-2px) rotate(-5deg); }
      75% { transform: translateX(2px) rotate(5deg); }
    }

    @keyframes gift {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-4px); }
    }

    @keyframes glow {
      0% {
        box-shadow: 0 0 5px rgba(220, 38, 38, 0.5),
                   0 0 15px rgba(220, 38, 38, 0.3),
                   inset 0 0 5px rgba(255, 255, 255, 0.1);
      }
      50% {
        box-shadow: 0 0 15px rgba(220, 38, 38, 0.7),
                   0 0 25px rgba(220, 38, 38, 0.5),
                   inset 0 0 10px rgba(255, 255, 255, 0.2);
      }
      100% {
        box-shadow: 0 0 5px rgba(220, 38, 38, 0.5),
                   0 0 15px rgba(220, 38, 38, 0.3),
                   inset 0 0 5px rgba(255, 255, 255, 0.1);
      }
    }

    @keyframes border-glow {
      0%, 100% {
        border-color: rgba(220, 38, 38, 0.5);
      }
      50% {
        border-color: rgba(239, 68, 68, 0.8);
      }
    }

    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.02);
      }
    }

    @keyframes textGlow {
      0%, 100% {
        text-shadow: 0 0 8px rgba(255, 255, 255, 0.7),
                     0 0 12px rgba(255, 255, 255, 0.5);
      }
      50% {
        text-shadow: 0 0 16px rgba(255, 255, 255, 0.9),
                     0 0 20px rgba(255, 255, 255, 0.7);
      }
    }

    @keyframes pulse-ring {
      0% {
        box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
      }
    }

    @keyframes scale-attention {
      0%, 100% {
        transform: scale(1);
      }
      50% {
        transform: scale(1.05);
      }
    }

    .animate-truck { animation: truck 2s ease-in-out infinite; }
    .animate-cart { animation: cart 2s ease-in-out infinite; }
    .animate-gift { animation: gift 2s ease-in-out infinite; }
    .animate-scale-attention { animation: scale-attention 2s ease-in-out infinite; }

    .animate-pulse-ring {
      animation: pulse-ring 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    .animate-shine {
      animation: shine 3s linear infinite;
    }
  </style>

  <div class="max-w-[980px] mx-auto px-4 py-8 md:py-16">
    <div class="md:flex md:flex-col md:gap-12 md:items-start">
      
      <!-- Galer√≠a (React) -->
      <div class="md:w-full mt-4">
        <MyGallery productImages={productImages} title={title} client:load />
      </div>

      <!-- Contenido del producto -->
      <div class="md:w-full mt-4 md:mt-0">
        <h1 class="text-3xl md:text-4xl font-bold mb-6">{title}</h1>

        <!-- Precio y Bot√≥n de Compra -->
        <div class="flex flex-col gap-4 mb-6">
          <!-- Precio y env√≠o -->
          <div class="flex flex-col md:flex-row items-center justify-between gap-4">
            <div class="flex items-baseline flex-wrap gap-2">
              <span class="text-3xl md:text-4xl font-bold text-red-600">
                ${price.toLocaleString('es-CL')}
              </span>
              {oldPrice && (
                <>
                  <span class="text-xl text-gray-500 line-through">
                    ${oldPrice.toLocaleString('es-CL')}
                  </span>
                  <span class="bg-green-500 text-white px-2 py-1 rounded-full text-sm font-bold">
                    {Math.round(((oldPrice - price) / oldPrice) * 100)}% OFF
                  </span>
                </>
              )}
            </div>
            <div class="flex items-center gap-2 bg-red-50 border-2 border-red-200 rounded-lg px-4 py-2">
              <span class="text-red-600 font-bold animate-truck">üöö</span>
              <span class="text-red-600 font-bold tracking-wide">¬°ENV√çO GRATIS!</span>
            </div>
          </div>

          <button
            id="openPurchaseModal"
            class="group w-full text-white py-4 px-8 rounded-lg text-xl font-bold bg-gradient-to-r from-red-500 via-red-600 to-red-500 hover:from-red-600 hover:via-red-700 hover:to-red-600 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl relative overflow-hidden flex items-center justify-center"
          >
            <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20 animate-shine"></div>
            <div class="absolute inset-0 animate-pulse-ring"></div>
            <div class="flex flex-col items-center relative">
              <div class="flex items-center gap-3 animate-scale-attention">
                <span class="animate-cart">üõí</span>
                <span class="text-glow whitespace-nowrap tracking-wide uppercase">
                  ¬°COMPRAR AHORA!
                </span>
                <span class="animate-gift">üéÅ</span>
              </div>
              <div class="flex items-center gap-2 text-sm mt-1">
                <span class="animate-pulse">‚ö°</span>
                <span class="font-medium opacity-90">¬°√öltimas unidades!</span>
                <span class="animate-pulse">‚ö°</span>
              </div>
            </div>
          </button>

          <div class="space-y-4 text-gray-600">
            {descriptionParagraphs.map((p) => (
              <p class="text-lg leading-relaxed">{p}</p>
            ))}
          </div>

          {/* Banner de Colaboradores */}
          <CollaboratorsBanner client:load />

          {/* Men√∫s acorde√≥n */}
          <div class="mt-12 space-y-4">
            {instructions.length > 0 && (
              <div class="border border-gray-200 rounded-xl overflow-hidden">
                <button
                  class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                  onclick="toggleAccordion(this)"
                >
                  <span class="text-lg font-semibold">Modo de Uso</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 transform transition-transform"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                <div class="hidden px-6 py-4 bg-gray-50">
                  <ul class="list-disc list-inside space-y-2 text-gray-600">
                    {instructions.map((instruction) => (
                      <p set:html={processMarkdown(instruction)} />
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {shipping.length > 0 && (
              <div class="border border-gray-200 rounded-xl overflow-hidden">
                <button
                  class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                  onclick="toggleAccordion(this)"
                >
                  <span class="text-lg font-semibold">Env√≠o</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 transform transition-transform"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                <div class="hidden px-6 py-4 bg-gray-50">
                  <div class="space-y-2 text-gray-600">
                    {shipping.map((item) => (
                      <p set:html={processMarkdown(item)} />
                    ))}
                  </div>
                </div>
              </div>
            )}

            {warranty.length > 0 && (
              <div class="mt-12 space-y-4">
                <div class="border border-gray-200 rounded-xl overflow-hidden">
                  <button
                    class="w-full px-6 py-4 text-left flex justify-between items-center hover:bg-gray-50 transition-colors"
                    onclick="toggleAccordion(this)"
                  >
                    <span class="text-lg font-semibold">Garant√≠a</span>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 transform transition-transform"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                  <div class="hidden px-6 py-4 bg-gray-50">
                    <ul class="list-disc list-inside space-y-2 text-gray-600">
                      {warranty.map((item) => (
                        <li>{item}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

    <!-- Modal de compra -->
    <div id="purchaseModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999]">
      <div class="fixed inset-0 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto relative">
          <button class="close-modal absolute top-4 right-4 text-gray-500 hover:text-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <PurchaseForm productTitle={title} productPrice={price} client:load />
        </div>
      </div>
    </div>

    <!-- Secci√≥n de Rese√±as -->
    {reviews.length > 0 && (
      <div class="mt-16 max-w-[980px] mx-auto px-4">
        <h2 class="text-3xl font-bold mb-8 text-center">Opiniones de Clientes</h2>
        <div class="grid md:grid-cols-2 gap-6">
          {reviews.map((review, index) => (
            <div 
              key={index} 
              class="bg-white border border-gray-200 rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-300"
            >
              <div class="flex items-center mb-4">
                <div class="flex-grow">
                  <h3 class="font-semibold text-lg">{review.name}</h3>
                  <span class="text-sm text-gray-500">{review.date}</span>
                </div>
                <div class="flex">
                  {Array.from({ length: 5 }, (_, i) => (
                    <svg 
                      key={i}
                      class={`w-5 h-5 ${i < review.rating ? 'text-yellow-400' : 'text-gray-300'}`}
                      fill="currentColor" 
                      viewBox="0 0 20 20"
                    >
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                  ))}
                </div>
              </div>
              <p class="text-gray-700 italic">"{review.text}"</p>
            </div>
          ))}
        </div>
      </div>
    )}

  <!-- Scripts para acordeones y modal -->
  <script is:inline>
    // Acordeones
    window.toggleAccordion = (button) => {
      const content = button.nextElementSibling;
      content.style.display = content.style.display === 'none' ? 'block' : 'none';
    };

    // Modal
    document.addEventListener('DOMContentLoaded', () => {
      const modal = document.getElementById('purchaseModal');
      const openButton = document.getElementById('openPurchaseModal');
      const closeButtons = document.querySelectorAll('.close-modal');

      if (openButton) {
        openButton.addEventListener('click', () => {
          if (modal) modal.style.display = 'block';
        });
      }

      closeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          if (typeof window.handleFormClose === 'function') {
            window.handleFormClose();
          }
        });
      });

      window.addEventListener('click', (e) => {
        if (e.target === modal && typeof window.handleFormClose === 'function') {
          window.handleFormClose();
        }
      });
    });
  </script>
</Layout>