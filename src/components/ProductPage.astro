---
import Layout from '../layouts/Layout.astro';
import PurchaseForm from '../components/PurchaseForm.jsx';
import MyGallery from '../components/MyGallery.jsx';
import CollaboratorsBanner from '../components/CollaboratorsBanner.jsx';
import ProductAccordion from '../components/ProductAccordion.jsx';
import ProductReviewsPreview from '../components/ProductReviewsPreview.jsx';
import ProductPriceSection from '../components/ProductPriceSection.jsx';
import ProductReviews from '../components/ProductReviews.jsx';
import { marked } from 'marked';

// Configurar marked
marked.setOptions({
  breaks: true,
  gfm: true,
});

interface Review {
  name: string;
  date: string;
  rating: number;
  text: string;
}

interface Props {
  title: string;
  productImages: string[];
  price: number;
  price_1: number;
  price_2: number;
  price_3: number;
  oldPrice?: number;
  descriptionParagraphs?: string[];
  reviews?: Review[];
  specifications?: string[];
  shipping?: string[];
  warranty?: string[];
}

const {
  title,
  productImages,
  price,
  price_1,
  price_2,
  price_3,
  oldPrice,
  descriptionParagraphs = [],
  reviews = [],
  specifications = [],
  shipping = [],
  warranty = []
} = Astro.props as Props;

function processMarkdown(text: string) {
  return marked.parse(text, {
    breaks: true,
    headerIds: false,
  });
}

// Crear datos estructurados para Google Shopping
const productSchema = {
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": title,
  "image": productImages,
  "description": descriptionParagraphs.join(" "),
  "brand": {
    "@type": "Brand",
    "name": "MuStore"
  },
  "offers": {
    "@type": "Offer",
    "url": Astro.url.href,
    "priceCurrency": "CLP",
    "price": price,
    "priceValidUntil": new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString(),
    "availability": "https://schema.org/InStock"
  },
  "aggregateRating": reviews.length > 0 ? {
    "@type": "AggregateRating",
    "ratingValue": (reviews.reduce((acc, review) => acc + review.rating, 0) / reviews.length).toFixed(1),
    "reviewCount": reviews.length
  } : undefined
};

---

<Layout title={title}>
  <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
  <style is:global>
    @keyframes shine {
      0% { background-position: -200% 50%; }
      100% { background-position: 200% 50%; }
    }

    @keyframes cart {
      0%, 100% { transform: translateX(0) rotate(0); }
      25% { transform: translateX(-2px) rotate(-5deg); }
      75% { transform: translateX(2px) rotate(5deg); }
    }

    @keyframes gift {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-4px); }
    }

    @keyframes shine {
      from { transform: translateX(-100%); }
      to { transform: translateX(200%); }
    }
    
    @keyframes bounce-x {
      0%, 100% { transform: translateX(0); }
      50% { transform: translateX(3px); }
    }

    @keyframes pulse-soft {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.8; }
    }

    @keyframes shine-fast {
      0% { transform: translateX(-100%); opacity: 0; }
      50% { opacity: 1; }
      100% { transform: translateX(100%); opacity: 0; }
    }

    .animate-cart { animation: cart 2s ease-in-out infinite; }
    .animate-gift { animation: gift 2s ease-in-out infinite; }
    .animate-bounce-x {
      animation: bounce-x 1s ease-in-out infinite;
    }

    .animate-pulse-soft {
      animation: pulse-soft 2s ease-in-out infinite;
    }

    .animate-shine {
      animation: shine 3s linear infinite;
    }

    .animate-shine-fast {
      animation: shine-fast 1s linear infinite;
    }
  </style>

  <div class="max-w-[980px] mx-auto px-4 py-8 md:py-16">
    <div class="md:flex md:flex-col md:gap-12 md:items-start">
      <!-- Galería -->
      <div class="md:w-full mt-4">
        <MyGallery productImages={productImages} title={title} client:load />
      </div>

      <!-- Contenido principal -->
      <div class="md:w-full mt-4 md:mt-0">
        <h1 class="text-3xl md:text-4xl font-bold mb-6">{title}</h1>
        
        <!-- Sección de Precio -->
        <ProductPriceSection price={price} oldPrice={oldPrice} client:load />

        <!-- Preview de Reviews y Botón de Compra -->
        <ProductReviewsPreview 
          reviews={reviews} 
          price_1={price_1}
          price_2={price_2}
          price_3={price_3}
          client:load 
        />

        <!-- Descripción -->
        <div class="space-y-4 text-gray-600 mt-8">
          {descriptionParagraphs.map((p) => (
            <p class="text-lg leading-relaxed" set:html={marked.parse(p)} />
          ))}
        </div>

        <!-- Banner de Colaboradores -->
        <div class="mt-8">
          <CollaboratorsBanner client:load />
        </div>

        <!-- Acordeón de Información -->
        <ProductAccordion 
          specifications={specifications}
          shipping={shipping}
          warranty={warranty}
          client:load
        />

        <!-- Reviews Completas -->
        <div class="mt-16">
          <ProductReviews reviews={reviews} client:load />
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de compra -->
  <div id="purchaseModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999] overflow-y-auto">
    <div class="min-h-screen px-4 flex items-center justify-center">
      <div class="bg-white rounded-lg max-w-md w-full relative my-8">
        <button class="close-modal absolute -top-3 -right-3 bg-white rounded-full p-2 shadow-lg text-gray-500 hover:text-gray-700 z-[9999] flex items-center justify-center">
          <span class="sr-only">Cerrar</span>
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <div class="overflow-y-auto max-h-[90vh] overscroll-contain scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent">
          <div id="purchaseForm" data-quantity="1" data-price={price}>
            <PurchaseForm productTitle={title} productPrice={price} client:load />
          </div>
        </div>
      </div>
    </div>
  </div>

  <style>
    /* Estilo personalizado para la barra de scroll */
    ::-webkit-scrollbar {
      width: 6px;
    }

    ::-webkit-scrollbar-track {
      background: transparent;
    }

    ::-webkit-scrollbar-thumb {
      background: #d1d5db;
      border-radius: 3px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: #9ca3af;
    }
  </style>

  <!-- Scripts para acordeones y modal -->
  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // Funciones para los acordeones
      const accordionButtons = document.querySelectorAll('[data-accordion-target]');
      accordionButtons.forEach(button => {
        button.addEventListener('click', () => {
          const targetId = button.getAttribute('data-accordion-target');
          const target = document.querySelector(targetId);
          const icon = button.querySelector('[data-accordion-icon]');
          
          if (target.classList.contains('hidden')) {
            target.classList.remove('hidden');
            icon.style.transform = 'rotate(180deg)';
          } else {
            target.classList.add('hidden');
            icon.style.transform = 'rotate(0deg)';
          }
        });
      });

      // Funciones para el modal
      const modal = document.getElementById('purchaseModal');
      const openButtons = document.querySelectorAll('.open-modal');

      function openModal() {
        if (modal) {
          modal.classList.remove('hidden');
          modal.style.display = 'block';
        }
      }

      // Función global para abrir el modal (usada por los botones de compra)
      window.openPurchaseModal = openModal;

      // Función global para cerrar el modal
      window.closePurchaseModal = () => {
        if (modal) {
          modal.classList.add('hidden');
          modal.style.display = 'none';
        }
      };

      openButtons.forEach(button => {
        button.addEventListener('click', openModal);
      });

      // Función para establecer la cantidad y precio
      window.setQuantityPrice = (quantity, price) => {
        const purchaseForm = document.getElementById('purchaseForm');
        if (purchaseForm) {
          purchaseForm.setAttribute('data-quantity', quantity.toString());
          purchaseForm.setAttribute('data-price', price.toString());
        }
      };
    });
  </script>
</Layout>